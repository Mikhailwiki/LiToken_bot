import os
import asyncio
import nest_asyncio
import logging
import sys
from aiogram import Bot, Dispatcher, filters, F
from aiogram.utils import keyboard
from dotenv import load_dotenv
from db_manager import Database
from utils import make_qrcode, agree_with_num, get_table
from bot.keyboards import *
from bot.middlewares.trottling import ThrottlingMiddleware

load_dotenv()
nest_asyncio.apply()
TOKEN = os.getenv('BOT_TOKEN')
admins = os.getenv('ADMINS').split(',')

bot = Bot(token=TOKEN)
dp = Dispatcher()
logger = logging.getLogger(__name__)
database = Database('Users', os.getenv('USER_STORAGE_URL'), os.getenv('AWS_ACCESS_KEY_ID'),
                    os.getenv('AWS_SECRET_ACCESS_KEY'))


async def correct_user(message: types.Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º username(–µ—Å–ª–∏ –æ–Ω –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω)"""
    if not database.user_exist(message.from_user.id):
        await message.answer('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')
        return False
    if message.from_user.username is None:
        await message.answer('@username –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
        return False
    if not database.is_username_correct(message.from_user.id, message.from_user.username):
        database.update_username(message.from_user.id, message.from_user.username)
    return True


@dp.message(filters.Command('start'))
async def cmd_start(message: types.Message):
    if message.from_user.username is None:
        await message.answer('@username –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
        return
    if not database.user_exist(message.from_user.id):
        await register_user(message)
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')
    if not database.is_username_correct(message.from_user.id, message.from_user.username):
        database.update_username(message.from_user.id, message.from_user.username)

    if message.text.split('_')[0].startswith('/start send'):
        await cmd_send(message)
    else:
        await message.reply('''
        –ü—Ä–∏–≤–µ—Ç! –í —ç—Ç–æ–º –±–æ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è —Ç–æ–∫–µ–Ω–∞–º–∏. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–º–æ—â—åüìñ'.
        ''', reply_markup=keyboard_start)


@dp.message(F.text == '–ü–æ–º–æ—â—åüìñ')
async def cmd_help(message: types.Message):
    if not await correct_user(message):
        return
    await message.answer('''
–ü—Ä–∏–≤–µ—Ç –≤ —ç—Ç–æ –±–æ—Ç–µ —Ç—ã –º–æ–∂–µ—à—å –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è —Ç–æ–∫–µ–Ω–∞–º–∏ –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è qr –∫–æ–¥–æ–≤ 
/start - –µ—Å–ª–∏ –Ω–µ—Ç –∫–Ω–æ–ø–∫–∏ –±–∞–ª–∞–Ω—Å–∞
/get <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è qr –∫–æ–¥–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–Ω–µ—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä:
/get 50
–ï—Å–ª–∏ –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç - –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å
delay = 2 —Å–µ–∫''')


dp.message.register(cmd_help, filters.Command('help'))


@dp.message(filters.Command('get'))
async def cmd_get(message: types.Message):
    if not await correct_user(message):
        return
    data = message.text.split()
    if len(data) != 2 or not data[-1].isdigit():
        await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥')
        return
    to_id = message.from_user.id
    amount = int(data[1])
    buf, url = await make_qrcode(to_id, amount)
    await message.answer_photo(
        photo=types.BufferedInputFile(
            file=buf.getvalue(),
            filename=f"{message.from_user.first_name}-profile.png",
        ), caption=f'QR code –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ {amount} {await agree_with_num("–¢–æ–∫–µ–Ω–æ–≤", amount)}\n{url}')


dp.message.register(cmd_get, filters.Command('get'))


@dp.message(F.text == '–ë–∞–ª–∞–Ω—Åüíµ')
async def show_balance(message: types.Message):
    if not await correct_user(message):
        return
    balance = database.get_balance(message.from_user.id)
    await message.answer(f'–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ {balance} {await agree_with_num("–¢–æ–∫–µ–Ω", balance)}')


dp.message.register(show_balance, F.text == '–ë–∞–ª–∞–Ω—Åüíµ')


async def cmd_send(message: types.Message):
    if not await correct_user(message):
        return
    args = message.text.split('_')
    if len(args) != 3 or not args[1].isdigit() or not args[2].isdigit():
        await message.answer('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞')
        return
    to_id, amount = int(args[1]), int(args[2])
    id_ = message.from_user.id
    if not database.user_exist(to_id):
        await message.answer('–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        return
    confirm_builder = keyboard.InlineKeyboardBuilder().add(types.InlineKeyboardButton(
        text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
        callback_data=f'confirm_{id_}_{to_id}_{amount}')
    )
    await message.answer(
        f'–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{database.get_username(to_id)} {amount} {await agree_with_num("–¢–æ–∫–µ–Ω–æ–≤", int(amount))}',
        reply_markup=confirm_builder.as_markup()
    )


@dp.callback_query(F.data.startswith('confirm_'))
async def send_tokens(callback: types.CallbackQuery):
    args = callback.data.split('_')
    id_ = int(args[1])
    to_id = int(args[2])
    amount = int(args[3])
    if database.transaction(id_, to_id, amount):
        await callback.message.edit_text(
            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{database.get_username(to_id)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {amount} {await agree_with_num("–¢–æ–∫–µ–Ω–æ–≤", int(amount))}')
        await bot.send_message(chat_id=to_id,
                               text=f'–ü–æ–ª—É—á–µ–Ω–æ {amount} {await agree_with_num("–¢–æ–∫–µ–Ω–æ–≤", int(amount))} –æ—Ç @{callback.from_user.username}')
    else:
        await callback.message.edit_text('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')


dp.message.register(send_tokens, F.data.startswith('confirm_'))


async def register_user(message: types.Message):
    """–î–æ–±–∞–≤–ª—è–µ–º id —á–∞—Ç–∞, username –∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤(500)"""
    username = message.from_user.username
    chat_id = message.from_user.id
    coins = 500
    database.add_user(chat_id, coins, username)


@dp.message(filters.Command('add'))
async def cmd_add(message: types.Message):
    if not await correct_user(message):
        return
    data = message.text.split()
    if len(data) != 3 or not data[1].isdigit():
        await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥')
        return
    if message.from_user.username in admins:
        amount = int(data[1])
        username = data[-1]
        id_ = database.get_chat_id(username)
        if not database.user_exist(id_):
            await message.answer('–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
            return
        database.add_coins(id_, amount)
        await message.answer(
            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {amount} {await agree_with_num("–¢–æ–∫–µ–Ω–æ–≤", int(amount))}')
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã')


dp.message.register(cmd_add, filters.Command('add'))


@dp.message(filters.Command('sub'))
async def cmd_sub(message: types.Message):
    if not await correct_user(message):
        return
    data = message.text.split()
    if len(data) != 3 or not data[1].isdigit():
        await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥')
        return
    if message.from_user.username in admins:
        amount = int(data[1])
        username = data[-1]
        id_ = database.get_chat_id(username)
        if not database.user_exist(id_):
            await message.answer('–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
            return
        if database.get_transaction_verdict(id_, amount):
            database.subtract_coins(id_, amount)
            cur_balance = amount
        else:
            cur_balance = database.get_balance(id_)
            database.subtract_coins(id_, cur_balance)
            await message.answer(
                f'–í—ã—á–∏—Ç–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π. –ë–∞–ª–∞–Ω—Å –æ–±–Ω—É–ª–µ–Ω'
            )
        await message.answer(
            f'–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} —É—Å–ø–µ—à–Ω–æ –≤—ã—á—Ç–µ–Ω–æ {cur_balance} {await agree_with_num("–¢–æ–∫–µ–Ω–æ–≤", int(amount))}')
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã')


dp.message.register(cmd_sub, filters.Command('sub'))


@dp.message(filters.Command('table'))
async def cmd_table(message: types.Message):
    if not await correct_user(message):
        return
    if message.from_user.username not in admins:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã')
        return

    excel_file = await get_table(database.get_data())
    await message.answer_document(
        document=types.BufferedInputFile(excel_file.read(), filename='–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –±–∞–ª–∞–Ω—Å—ã.xlsx'))
    excel_file.close()


dp.message.register(cmd_table, filters.Command('table'))


async def main():
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)

    dp.message.middleware(ThrottlingMiddleware())
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('Exit')
